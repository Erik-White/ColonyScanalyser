{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ColonyScanalyser An image analysis tool for measuring microorganism colony growth. ColonyScanalyser will analyse and collate statistical data from agar plate images. It provides fast, high-throughput image processing. ColonyScanalyser can provide information on: Colony appearance time Growth parameters (lag time, rate, carrying capacity) Growth and appearance time distribution Colony colour (e.g. staining or other visual indicator) Install pip install colonyscanalyser Full installation instructions . Run scanalyser /path/to/images See the quick start guide for more information on getting up and running with ColonyScanalyser. Image requirements ColonyScanalyser is suitable for analysing series of images from a fixed point that show the development of microorganism colonies over time. The image specifications page has more detail on image requirements. Several image plots will be output after analysis is complete to enable quick verification of the data. A complete set of data is provided in CSV format for further study. License This project is licensed under the GPLv3 - see the license page for details","title":"Home"},{"location":"#colonyscanalyser","text":"An image analysis tool for measuring microorganism colony growth. ColonyScanalyser will analyse and collate statistical data from agar plate images. It provides fast, high-throughput image processing. ColonyScanalyser can provide information on: Colony appearance time Growth parameters (lag time, rate, carrying capacity) Growth and appearance time distribution Colony colour (e.g. staining or other visual indicator)","title":"ColonyScanalyser"},{"location":"#install","text":"pip install colonyscanalyser Full installation instructions .","title":"Install"},{"location":"#run","text":"scanalyser /path/to/images See the quick start guide for more information on getting up and running with ColonyScanalyser.","title":"Run"},{"location":"#image-requirements","text":"ColonyScanalyser is suitable for analysing series of images from a fixed point that show the development of microorganism colonies over time. The image specifications page has more detail on image requirements. Several image plots will be output after analysis is complete to enable quick verification of the data. A complete set of data is provided in CSV format for further study.","title":"Image requirements"},{"location":"#license","text":"This project is licensed under the GPLv3 - see the license page for details","title":"License"},{"location":"CHANGELOG/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [0.4.1] - 2020-05-11 Added Dockerfile and utility scripts Docker image is now available: https://hub.docker.com/r/erikwhite/colonyscanalyser [0.4.0] - 2020-03-26 Added plate_labels command line argument base module with base classes to provide core functionality throughout the package geometry module with base shape classes plate module with Plate and PlateCollection classes image_file module with ImageFile and ImageFileCollection classes growth_curve module to provide curve fitting and parameters plot_plate_images_animation outputs animated gifs for each plate in two sizes Output a summary of plate properties to plates_summary.csv Full type hinting for all modules Changed Extended compatibility to Python 3.8 Cached data is now not used by default Individual plots for each plate are now output by default use_saved command line argument renamed to use_cached_data Compressed serialised data filename changed to cached_data save_plots command line argument renamed to plots plate_size now defaults to 90 mm, the visible size of a 100 mm plate in a plate holder plate_edge_cut is now a percentage of the plate diameter, instead of a fixed pixel value Refactored most of the functions from main as static methods in the plate or image_file modules Improved flexibility when detecting date and time stamp information in file names Replaced growth properties in Colony , now implemented as growth_curve.GrowthCurveModel Modified plots to use new GrowthCurveModel properties Improved colony segmentation in low contrast images and under poor growth conditions Grouping of colony Timepoints is now faster and more accurate Colonies are no longer identified based on circularity Fixed A rare error when opening images using skimage.io.imread Corrected default DPI settings and conversion factor Removed A number of Colony properties - now implemented by growth_curve.GrowthCurveModel [0.3.4] - 2020-01-18 Added plate_edge_cut command line argument Plate and colony ID map to show how they have been identified Changed Add border exclusion and slightly relax colony circularity filtering in segment_image [0.3.3] - 2019-12-19 Added Colony colour identification and grouping Webcolors package and rgb_to_name function to provide CSS colour groupings Fixed crop_image will now correctly handle images without an alpha channel [0.3.2] - 2019-11-11 Added Documentation Published documentation to GitHub pages (https://erik-white.github.io/ColonyScanalyser/) Unit tests for the colony module [0.3.1] - 2019-11-04 Fixed Adjust setup to correctly find packages in implicit namespaces [0.3.0] - 2019-11-04 Added Added changelog Changed Update package to use src structure Update setup for readme compatability with PyPi [0.2.2] - 2019-11-02 Added GitHub action for automatically linting and testing pushes GitHub action for building and releasing package to PyPi Fixed Linting errors highlighted by flake8 [0.2.1] - 2019-10-31 Added Graceful exit if no colonies are found Workaround function to ensure correct plates are found in images Changed Improve Timepoint grouping by using distance comparison instead of rounding Updated Scikit-image to v0.16 Removed Depreciated Tk import Removed depreciated regionprop coordinates [0.2.0] - 2019-10-28 Added Multiprocessing: greatly improves image processing speed Now shows a progress bar when processing images Snyk security checks for dependencies Changed Per image processing: now processes a single image at a time Improve colony filtering, removes virtually all merged colonies Updated readme with images and code examples Fixed Greatly reduced memory usage by using per-image processing Filter out system files when locating images to process Rare divide by zero error when processing colony object data [0.1.2] - 2019-10-13 Inital release Added Image processing, plotting and data aggregation Python package uploaded to PyPi","title":"Release Notes"},{"location":"CHANGELOG/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"CHANGELOG/#041-2020-05-11","text":"","title":"[0.4.1] - 2020-05-11"},{"location":"CHANGELOG/#added","text":"Dockerfile and utility scripts Docker image is now available: https://hub.docker.com/r/erikwhite/colonyscanalyser","title":"Added"},{"location":"CHANGELOG/#040-2020-03-26","text":"","title":"[0.4.0] - 2020-03-26"},{"location":"CHANGELOG/#added_1","text":"plate_labels command line argument base module with base classes to provide core functionality throughout the package geometry module with base shape classes plate module with Plate and PlateCollection classes image_file module with ImageFile and ImageFileCollection classes growth_curve module to provide curve fitting and parameters plot_plate_images_animation outputs animated gifs for each plate in two sizes Output a summary of plate properties to plates_summary.csv Full type hinting for all modules","title":"Added"},{"location":"CHANGELOG/#changed","text":"Extended compatibility to Python 3.8 Cached data is now not used by default Individual plots for each plate are now output by default use_saved command line argument renamed to use_cached_data Compressed serialised data filename changed to cached_data save_plots command line argument renamed to plots plate_size now defaults to 90 mm, the visible size of a 100 mm plate in a plate holder plate_edge_cut is now a percentage of the plate diameter, instead of a fixed pixel value Refactored most of the functions from main as static methods in the plate or image_file modules Improved flexibility when detecting date and time stamp information in file names Replaced growth properties in Colony , now implemented as growth_curve.GrowthCurveModel Modified plots to use new GrowthCurveModel properties Improved colony segmentation in low contrast images and under poor growth conditions Grouping of colony Timepoints is now faster and more accurate Colonies are no longer identified based on circularity","title":"Changed"},{"location":"CHANGELOG/#fixed","text":"A rare error when opening images using skimage.io.imread Corrected default DPI settings and conversion factor","title":"Fixed"},{"location":"CHANGELOG/#removed","text":"A number of Colony properties - now implemented by growth_curve.GrowthCurveModel","title":"Removed"},{"location":"CHANGELOG/#034-2020-01-18","text":"","title":"[0.3.4] - 2020-01-18"},{"location":"CHANGELOG/#added_2","text":"plate_edge_cut command line argument Plate and colony ID map to show how they have been identified","title":"Added"},{"location":"CHANGELOG/#changed_1","text":"Add border exclusion and slightly relax colony circularity filtering in segment_image","title":"Changed"},{"location":"CHANGELOG/#033-2019-12-19","text":"","title":"[0.3.3] - 2019-12-19"},{"location":"CHANGELOG/#added_3","text":"Colony colour identification and grouping Webcolors package and rgb_to_name function to provide CSS colour groupings","title":"Added"},{"location":"CHANGELOG/#fixed_1","text":"crop_image will now correctly handle images without an alpha channel","title":"Fixed"},{"location":"CHANGELOG/#032-2019-11-11","text":"","title":"[0.3.2] - 2019-11-11"},{"location":"CHANGELOG/#added_4","text":"Documentation Published documentation to GitHub pages (https://erik-white.github.io/ColonyScanalyser/) Unit tests for the colony module","title":"Added"},{"location":"CHANGELOG/#031-2019-11-04","text":"","title":"[0.3.1] - 2019-11-04"},{"location":"CHANGELOG/#fixed_2","text":"Adjust setup to correctly find packages in implicit namespaces","title":"Fixed"},{"location":"CHANGELOG/#030-2019-11-04","text":"","title":"[0.3.0] - 2019-11-04"},{"location":"CHANGELOG/#added_5","text":"Added changelog","title":"Added"},{"location":"CHANGELOG/#changed_2","text":"Update package to use src structure Update setup for readme compatability with PyPi","title":"Changed"},{"location":"CHANGELOG/#022-2019-11-02","text":"","title":"[0.2.2] - 2019-11-02"},{"location":"CHANGELOG/#added_6","text":"GitHub action for automatically linting and testing pushes GitHub action for building and releasing package to PyPi","title":"Added"},{"location":"CHANGELOG/#fixed_3","text":"Linting errors highlighted by flake8","title":"Fixed"},{"location":"CHANGELOG/#021-2019-10-31","text":"","title":"[0.2.1] - 2019-10-31"},{"location":"CHANGELOG/#added_7","text":"Graceful exit if no colonies are found Workaround function to ensure correct plates are found in images","title":"Added"},{"location":"CHANGELOG/#changed_3","text":"Improve Timepoint grouping by using distance comparison instead of rounding Updated Scikit-image to v0.16","title":"Changed"},{"location":"CHANGELOG/#removed_1","text":"Depreciated Tk import Removed depreciated regionprop coordinates","title":"Removed"},{"location":"CHANGELOG/#020-2019-10-28","text":"","title":"[0.2.0] - 2019-10-28"},{"location":"CHANGELOG/#added_8","text":"Multiprocessing: greatly improves image processing speed Now shows a progress bar when processing images Snyk security checks for dependencies","title":"Added"},{"location":"CHANGELOG/#changed_4","text":"Per image processing: now processes a single image at a time Improve colony filtering, removes virtually all merged colonies Updated readme with images and code examples","title":"Changed"},{"location":"CHANGELOG/#fixed_4","text":"Greatly reduced memory usage by using per-image processing Filter out system files when locating images to process Rare divide by zero error when processing colony object data","title":"Fixed"},{"location":"CHANGELOG/#012-2019-10-13","text":"Inital release","title":"[0.1.2] - 2019-10-13"},{"location":"CHANGELOG/#added_9","text":"Image processing, plotting and data aggregation Python package uploaded to PyPi","title":"Added"},{"location":"CONTRIBUTING/","text":"Contributing When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change. Please note we have a code of conduct, please follow it in all your interactions with the project. Pull Request Process Ensure any install or build dependencies are removed before the end of the layer when doing a build. Update the README.md with details of changes to the interface, this includes new environment variables, exposed ports, useful file locations and container parameters. Increase the version numbers in any examples files and the README.md to the new version that this Pull Request would represent. The versioning scheme we use is SemVer . You may merge the Pull Request in once you have the sign-off of two other developers, or if you do not have permission to do that, you may request the second reviewer to merge it for you. Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [INSERT EMAIL ADDRESS]. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change. Please note we have a code of conduct, please follow it in all your interactions with the project.","title":"Contributing"},{"location":"CONTRIBUTING/#pull-request-process","text":"Ensure any install or build dependencies are removed before the end of the layer when doing a build. Update the README.md with details of changes to the interface, this includes new environment variables, exposed ports, useful file locations and container parameters. Increase the version numbers in any examples files and the README.md to the new version that this Pull Request would represent. The versioning scheme we use is SemVer . You may merge the Pull Request in once you have the sign-off of two other developers, or if you do not have permission to do that, you may request the second reviewer to merge it for you.","title":"Pull Request Process"},{"location":"CONTRIBUTING/#code-of-conduct","text":"","title":"Code of Conduct"},{"location":"CONTRIBUTING/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"CONTRIBUTING/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"CONTRIBUTING/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"CONTRIBUTING/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"CONTRIBUTING/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [INSERT EMAIL ADDRESS]. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"CONTRIBUTING/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Attribution"},{"location":"LICENSE/","text":"GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. http://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS Definitions. \"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. {one line to give the program's name and a brief idea of what it does.} Copyright (C) {year} {name of author} This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: {project} Copyright (C) {year} {fullname} This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands show w' and show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see http://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read http://www.gnu.org/philosophy/why-not-lgpl.html .","title":"License"},{"location":"colony_filtering/","text":"Filtering criteria Images are first segmented to find objects in the image that appear to be colonies. Objects are assessed on three initial criteria: Size: objects smaller than 1.5 pixels are ignored. This reduces that amount of noise at the limit of detection Plate edges: colonies are removed if they grow over the edge of the plate measurement area Static objects: objects or image arefacts that are present in the first (i.e. empty) plate are removed. Colonies that intersect with these objects are also removed After segmenting, the resulting objects are filtered further by three criteria: Colonies that do not have enough data points Colonies with large gaps in the data points Objects that do not show growth Colonies with large initial areas (merged colonies) This filtering has the effect of removing colonies that merge together. This is beneficial as merged colonies do not exhibit the same growth characteristics as unimpinged colonies. It is also practically impossible to divide a merged area between two individual colonies.","title":"Colony Filtering Criteria"},{"location":"colony_filtering/#filtering-criteria","text":"Images are first segmented to find objects in the image that appear to be colonies. Objects are assessed on three initial criteria: Size: objects smaller than 1.5 pixels are ignored. This reduces that amount of noise at the limit of detection Plate edges: colonies are removed if they grow over the edge of the plate measurement area Static objects: objects or image arefacts that are present in the first (i.e. empty) plate are removed. Colonies that intersect with these objects are also removed After segmenting, the resulting objects are filtered further by three criteria: Colonies that do not have enough data points Colonies with large gaps in the data points Objects that do not show growth Colonies with large initial areas (merged colonies) This filtering has the effect of removing colonies that merge together. This is beneficial as merged colonies do not exhibit the same growth characteristics as unimpinged colonies. It is also practically impossible to divide a merged area between two individual colonies.","title":"Filtering criteria"},{"location":"command_line_arguments/","text":"Command Line Arguments A list of optional arguments, and their default values, that affect the way ColonyScanalyser is run. Some arguments have a 'shorthand' version that saves having to type the full command. Shorthand arguments are prefixed by a single dash - , while normal arguments are prefixed by two dashes -- The only required argument is the path to the folder containing the image files you wish to analyse. Optional arguments can be added after the folder path e.g. scanalyser /path/to/images --use_saved false You can add as many optional arguments as you like: scanalyser /path/to/images --use_saved false -mp true -dpi 300 --plate_lattice 2 3 Help A full list of available arguments, along with their default values -h --help Image density The image density your scanner uses, this can usually be found in your scanner settings. It is important to set this correctly as it enables the program to acurately convert the plate size in millimeters to pixels. input: integer -dpi --dots_per_inch Multiprocessing This technique utilises all of the available processors that your computer has to analyse images in parallel. Since most computers now have at least 2 or 4 processors, this can greatly reduce the time needed to process a set of images. This technique is however quite resource intensive for your computer so you may wish to disable it. input: boolean -mp --multiprocessing Plot images output The level of detail required when saving plot images after analysis. At the default level ( 1 ), a few summary plots are saved to give a quick overview of the data. If the output level is increased, individual plots for each plate will be saved. At the highest level (currently 4 ), animations of plate images are created in gif format. These may take several minutes to create and the process can be quite resource intensive. input: boolean -p --plots Plate edge cut The radius, as a percentage of the plate diameter, to exclude from the edge of the plate image. This ensures that the image is clear of reflections, shadows and writing that are typically present near the edge of the plate image. input: integer --plate_edge_cut Plate labels A list of labels to identify each plate. The label is used in file names and the plate map. Plates are ordered from top left, in rows, and labels must be provided in that order. Labels are separated with spaces. To use a space within a label, wrap that label in quotes Example: --plate_labels first second third \"label with spaces\" fifth sixth input: list --plate_labels Plate holder shape The layout of the plates in the image in rows and columns. The default is 3 rows and 2 columns. A square grid of 9 plates would be entered as --plate_lattice 3 3 input: integer --plate_lattice Plate size The diameter of the plates used, in millimeters. It is important to set this correctly otherwise the plates may be located incorrectly in the images. input: integer --plate_size Cached data The package saves a compressed serialised version of its output, along with the uncompressed CSV data. This allows it to quickly generate the CSV files and plot images again, without the need for reanalysing the original images. This is disabled by default to prevent confusing situation where outdated information is output from new or altered image sets. input: boolean --use_cached_data Information output The level of information output to the command line. Default level is 1 , increase to see more information. Output can be silenced with 0 input: integer -v --verbose","title":"Command Line Arguments"},{"location":"command_line_arguments/#command-line-arguments","text":"A list of optional arguments, and their default values, that affect the way ColonyScanalyser is run. Some arguments have a 'shorthand' version that saves having to type the full command. Shorthand arguments are prefixed by a single dash - , while normal arguments are prefixed by two dashes -- The only required argument is the path to the folder containing the image files you wish to analyse. Optional arguments can be added after the folder path e.g. scanalyser /path/to/images --use_saved false You can add as many optional arguments as you like: scanalyser /path/to/images --use_saved false -mp true -dpi 300 --plate_lattice 2 3","title":"Command Line Arguments"},{"location":"command_line_arguments/#help","text":"A full list of available arguments, along with their default values -h --help","title":"Help"},{"location":"command_line_arguments/#image-density","text":"The image density your scanner uses, this can usually be found in your scanner settings. It is important to set this correctly as it enables the program to acurately convert the plate size in millimeters to pixels. input: integer -dpi --dots_per_inch","title":"Image density"},{"location":"command_line_arguments/#multiprocessing","text":"This technique utilises all of the available processors that your computer has to analyse images in parallel. Since most computers now have at least 2 or 4 processors, this can greatly reduce the time needed to process a set of images. This technique is however quite resource intensive for your computer so you may wish to disable it. input: boolean -mp --multiprocessing","title":"Multiprocessing"},{"location":"command_line_arguments/#plot-images-output","text":"The level of detail required when saving plot images after analysis. At the default level ( 1 ), a few summary plots are saved to give a quick overview of the data. If the output level is increased, individual plots for each plate will be saved. At the highest level (currently 4 ), animations of plate images are created in gif format. These may take several minutes to create and the process can be quite resource intensive. input: boolean -p --plots","title":"Plot images output"},{"location":"command_line_arguments/#plate-edge-cut","text":"The radius, as a percentage of the plate diameter, to exclude from the edge of the plate image. This ensures that the image is clear of reflections, shadows and writing that are typically present near the edge of the plate image. input: integer --plate_edge_cut","title":"Plate edge cut"},{"location":"command_line_arguments/#plate-labels","text":"A list of labels to identify each plate. The label is used in file names and the plate map. Plates are ordered from top left, in rows, and labels must be provided in that order. Labels are separated with spaces. To use a space within a label, wrap that label in quotes Example: --plate_labels first second third \"label with spaces\" fifth sixth input: list --plate_labels","title":"Plate labels"},{"location":"command_line_arguments/#plate-holder-shape","text":"The layout of the plates in the image in rows and columns. The default is 3 rows and 2 columns. A square grid of 9 plates would be entered as --plate_lattice 3 3 input: integer --plate_lattice","title":"Plate holder shape"},{"location":"command_line_arguments/#plate-size","text":"The diameter of the plates used, in millimeters. It is important to set this correctly otherwise the plates may be located incorrectly in the images. input: integer --plate_size","title":"Plate size"},{"location":"command_line_arguments/#cached-data","text":"The package saves a compressed serialised version of its output, along with the uncompressed CSV data. This allows it to quickly generate the CSV files and plot images again, without the need for reanalysing the original images. This is disabled by default to prevent confusing situation where outdated information is output from new or altered image sets. input: boolean --use_cached_data","title":"Cached data"},{"location":"command_line_arguments/#information-output","text":"The level of information output to the command line. Default level is 1 , increase to see more information. Output can be silenced with 0 input: integer -v --verbose","title":"Information output"},{"location":"example_output/","text":"Example output A few simple plots are saved to allow quick comparison of the different plates. Increasing the plots argument will increase the number and detail of plots that are output, see the command line arguments for more detail. Data such as colony area, colour, time of appearance etc is output to a set of CSV files. Growth curve fitting with the Gompertz function is attempted for each colony and this data is provided where fitting is possible. Plate identification Plates are numbered sequentially, starting from the top left and proceeding in rows. On a 3 x 2 lattice the plate numbers will be: 1 2 3 4 5 6 A 'map' of the identified plates and colonies will be output to show how they have been identified. This can be useful for correlating data from individual colonies with the specific colony on the plate. Note that colonies are shown at their final measurement size, which may be smaller than the colony in the image. Measurements are stopped if colonies merge, or if they do not meet other criteria e.g. they display low circularity. Plots At the default level, a few comparison plots are output to the plots folder in your image folder. These allow quick verification and comparison of the data. Individual plots for each plate are also saved, this includes growth curves fitted with the Gompertz function (where fitting is successful). At the highest level of plots , a separate animated gif image of each plate is output. This may be useful for viewing the progression of colonies through their growth period, as well as for comparing growth in differing plate conditions. Only the measured plate area is shown in the animations. The area defined by plate_edge_cut is excluded. Data All the data gathered during analysis is output to the data folder in your images folder. Data is output as CSV files which is compatible with almost all data packages. Summarised data of all plates is saved as plates_summary.csv Additionally, data is collated in two files for each plate, one with aggregate data for each colony and another with colony data at every image time point: plate1_colonies.csv plate1_colony_timepoints.csv plate2_colonies.csv plate2_colony_timepoints.csv plate3_colonies.csv plate3_colony_timepoints.csv ... A single compressed data file, processed_data.xz , is also saved. This contains all the data objects from analysis and can be used by the package to quickly recreate the plots and data files.","title":"Example Output"},{"location":"example_output/#example-output","text":"A few simple plots are saved to allow quick comparison of the different plates. Increasing the plots argument will increase the number and detail of plots that are output, see the command line arguments for more detail. Data such as colony area, colour, time of appearance etc is output to a set of CSV files. Growth curve fitting with the Gompertz function is attempted for each colony and this data is provided where fitting is possible.","title":"Example output"},{"location":"example_output/#plate-identification","text":"Plates are numbered sequentially, starting from the top left and proceeding in rows. On a 3 x 2 lattice the plate numbers will be: 1 2 3 4 5 6 A 'map' of the identified plates and colonies will be output to show how they have been identified. This can be useful for correlating data from individual colonies with the specific colony on the plate. Note that colonies are shown at their final measurement size, which may be smaller than the colony in the image. Measurements are stopped if colonies merge, or if they do not meet other criteria e.g. they display low circularity.","title":"Plate identification"},{"location":"example_output/#plots","text":"At the default level, a few comparison plots are output to the plots folder in your image folder. These allow quick verification and comparison of the data. Individual plots for each plate are also saved, this includes growth curves fitted with the Gompertz function (where fitting is successful). At the highest level of plots , a separate animated gif image of each plate is output. This may be useful for viewing the progression of colonies through their growth period, as well as for comparing growth in differing plate conditions. Only the measured plate area is shown in the animations. The area defined by plate_edge_cut is excluded.","title":"Plots"},{"location":"example_output/#data","text":"All the data gathered during analysis is output to the data folder in your images folder. Data is output as CSV files which is compatible with almost all data packages. Summarised data of all plates is saved as plates_summary.csv Additionally, data is collated in two files for each plate, one with aggregate data for each colony and another with colony data at every image time point: plate1_colonies.csv plate1_colony_timepoints.csv plate2_colonies.csv plate2_colony_timepoints.csv plate3_colonies.csv plate3_colony_timepoints.csv ... A single compressed data file, processed_data.xz , is also saved. This contains all the data objects from analysis and can be used by the package to quickly recreate the plots and data files.","title":"Data"},{"location":"image_specifications/","text":"Image specifications ColonyScanalyser requires clear, high-resolution images from a static viewpoint. Flatbed scanners are a simple and inexpensive way to achieve this. A program is needed to automatically set the scanners to take images at the desired set intervals. Scanners Scanners with a resolution of at least 300 DPI are recommended, though greater image density will enable greater colony differentiation and improve first appearance detection. Plates and holders To allow the colonies to easily be discerned in the image, a strongly contrasting background is needed. An easy technique is to paint the bottom of the plates black, or place them on black fabric. Image formats Images should be saved in a lossless format . ColonyScanalyser currently supports png and tiff image files. Image file names Images need to be saved with a file name that contains the date and time stamp when the image was taken. This information must be in YYYYMMDD HHMM (year/month/day hour/minute) format. Date and timestamp detection is flexible and can tolerate a wide range of separator characters. For example these are all valid: image20190624_1034.tif image2019-06-24_11-04.tif 2019 06 24_1134_image.tif ... Examples The image below shows the same set of plates at the start (left), and the end (right) of growth. The plates on the top row show good colony growth, while the plates on the middle row show inhibited growth. The plates on the bottom row are empty, but show the importance of a high contrast background.","title":"Image Specifications"},{"location":"image_specifications/#image-specifications","text":"ColonyScanalyser requires clear, high-resolution images from a static viewpoint. Flatbed scanners are a simple and inexpensive way to achieve this. A program is needed to automatically set the scanners to take images at the desired set intervals.","title":"Image specifications"},{"location":"image_specifications/#scanners","text":"Scanners with a resolution of at least 300 DPI are recommended, though greater image density will enable greater colony differentiation and improve first appearance detection.","title":"Scanners"},{"location":"image_specifications/#plates-and-holders","text":"To allow the colonies to easily be discerned in the image, a strongly contrasting background is needed. An easy technique is to paint the bottom of the plates black, or place them on black fabric.","title":"Plates and holders"},{"location":"image_specifications/#image-formats","text":"Images should be saved in a lossless format . ColonyScanalyser currently supports png and tiff image files.","title":"Image formats"},{"location":"image_specifications/#image-file-names","text":"Images need to be saved with a file name that contains the date and time stamp when the image was taken. This information must be in YYYYMMDD HHMM (year/month/day hour/minute) format. Date and timestamp detection is flexible and can tolerate a wide range of separator characters. For example these are all valid: image20190624_1034.tif image2019-06-24_11-04.tif 2019 06 24_1134_image.tif ...","title":"Image file names"},{"location":"image_specifications/#examples","text":"The image below shows the same set of plates at the start (left), and the end (right) of growth. The plates on the top row show good colony growth, while the plates on the middle row show inhibited growth. The plates on the bottom row are empty, but show the importance of a high contrast background.","title":"Examples"},{"location":"installation/","text":"Installation Python ColonyScanalyser requires Python version 3.7 or greater, and the Pip package manager. Pip is included with Python version 3.4 and up. There are many detailed guides on the web so I will only cover the most basic cases here. On Mac The Homebrew package manager is recommended for managing your Python installation. Once Homebrew is installed, simply open terminal and run the command brew install python On Linux Python may come bundled with your distribution, otherwise it will be available through your package manager e.g. sudo apt-get install python3.7 On Windows Go to the Python downloads site and grab the latest Python installer. Run the installer once it has downloaded and follow the setup instructions. ColonyScanalyser Use the Python package manager, Pip, to install the ColonyScanalyser package : pip3 install colonyscanalyser A message should hopefully indicate that the ColonyScanalyser package was downloaded and installed successfully. Note: We use the command pip3 in case both Python 2 & 3 are installed on the system. In which case pip will usually default to installing packages for Python 2 Virtual environments There are a number of benefits to setting up self-contained virtual environments instead of installing system-wide packages: Creates a separate and controlled work environment Easily manages complex interdependencies We use Pipenv which is a combined environment and package manager. Install it with Homebrew: brew install pipenv Then create a new Python 3 environment in a workspace folder and install the ColonyScanalyser package: cd /my/example/workspace pipenv --three pipenv install colonyscanalyser Then run the ColonyScanalyser package: pipenv run scanalyser /path/to/images More detailed instructions can be found on the Python packaging site. Docker The image is available on Docker Hub . Alternatively, you can build the image yourself using the Dockerfile included with the package. The container can be built by running docker-build.sh in the scripts directory. scripts/docker-run.sh is an example of how to use a containerised instance of ColonyScanalyser to analyse images in a directory on the host machine. Run the script as you normally would ColonyScanalyser, passing it the target image directory followed by any other command line arguments: scripts/docker-run.sh /absolute/path/to/images/ --verbose 3 --plate_size 100","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#python","text":"ColonyScanalyser requires Python version 3.7 or greater, and the Pip package manager. Pip is included with Python version 3.4 and up. There are many detailed guides on the web so I will only cover the most basic cases here.","title":"Python"},{"location":"installation/#on-mac","text":"The Homebrew package manager is recommended for managing your Python installation. Once Homebrew is installed, simply open terminal and run the command brew install python","title":"On Mac"},{"location":"installation/#on-linux","text":"Python may come bundled with your distribution, otherwise it will be available through your package manager e.g. sudo apt-get install python3.7","title":"On Linux"},{"location":"installation/#on-windows","text":"Go to the Python downloads site and grab the latest Python installer. Run the installer once it has downloaded and follow the setup instructions.","title":"On Windows"},{"location":"installation/#colonyscanalyser","text":"Use the Python package manager, Pip, to install the ColonyScanalyser package : pip3 install colonyscanalyser A message should hopefully indicate that the ColonyScanalyser package was downloaded and installed successfully. Note: We use the command pip3 in case both Python 2 & 3 are installed on the system. In which case pip will usually default to installing packages for Python 2","title":"ColonyScanalyser"},{"location":"installation/#virtual-environments","text":"There are a number of benefits to setting up self-contained virtual environments instead of installing system-wide packages: Creates a separate and controlled work environment Easily manages complex interdependencies We use Pipenv which is a combined environment and package manager. Install it with Homebrew: brew install pipenv Then create a new Python 3 environment in a workspace folder and install the ColonyScanalyser package: cd /my/example/workspace pipenv --three pipenv install colonyscanalyser Then run the ColonyScanalyser package: pipenv run scanalyser /path/to/images More detailed instructions can be found on the Python packaging site.","title":"Virtual environments"},{"location":"installation/#docker","text":"The image is available on Docker Hub . Alternatively, you can build the image yourself using the Dockerfile included with the package. The container can be built by running docker-build.sh in the scripts directory. scripts/docker-run.sh is an example of how to use a containerised instance of ColonyScanalyser to analyse images in a directory on the host machine. Run the script as you normally would ColonyScanalyser, passing it the target image directory followed by any other command line arguments: scripts/docker-run.sh /absolute/path/to/images/ --verbose 3 --plate_size 100","title":"Docker"},{"location":"quick_start/","text":"Quick start guide Install Python The most basic requirements for the package are simply Python with its package manager Python >= 3.7 Pip The installation guide has more information on getting Python. Install ColonyScanalyser Once Python is installed the Python package manager, Pip, can be used to install ColonyScanalyser. Open a command line window and install the package: pip3 install colonyscanalyser Analyse your images Now that the ColonyScanalyser package is installed, we can run it from the command line. The package is run with the command scanalyser , followed by any arguments Try running the command with the --help or -h argument to see a list of available arguments and their default values: scanalyser --help The only argument you normally need is the folder path to your images: scanalyser images_folder/path If this path contains spaces you must enclose it in quotes: scanalyser \"/images folder/path\" See the command line arguments page for a full list and further details. If you have entered a correct folder path you will see some messages from ColonyScanalyser as it begins to process and analyse your data.","title":"Quick Start Guide"},{"location":"quick_start/#quick-start-guide","text":"","title":"Quick start guide"},{"location":"quick_start/#install-python","text":"The most basic requirements for the package are simply Python with its package manager Python >= 3.7 Pip The installation guide has more information on getting Python.","title":"Install Python"},{"location":"quick_start/#install-colonyscanalyser","text":"Once Python is installed the Python package manager, Pip, can be used to install ColonyScanalyser. Open a command line window and install the package: pip3 install colonyscanalyser","title":"Install ColonyScanalyser"},{"location":"quick_start/#analyse-your-images","text":"Now that the ColonyScanalyser package is installed, we can run it from the command line. The package is run with the command scanalyser , followed by any arguments Try running the command with the --help or -h argument to see a list of available arguments and their default values: scanalyser --help The only argument you normally need is the folder path to your images: scanalyser images_folder/path If this path contains spaces you must enclose it in quotes: scanalyser \"/images folder/path\" See the command line arguments page for a full list and further details. If you have entered a correct folder path you will see some messages from ColonyScanalyser as it begins to process and analyse your data.","title":"Analyse your images"}]}